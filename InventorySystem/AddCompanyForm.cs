using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity; 
using Telerik.WinControls;

namespace InventorySystem
{
    public partial class AddCompanyForm : Telerik.WinControls.UI.RadForm
    {
        static AddCompanyForm form;
        InventorySystemEntities _context = new InventorySystemEntities();
        private AddCompanyForm()
        {
            InitializeComponent();
        }
        public static AddCompanyForm GetInstance()
        {
            if (form != null)
            {
                return form;
            }
            form = new AddCompanyForm();
            return form;

        }
        

        private void companyBindingNavigatorSaveItem_Click(object sender, EventArgs e)
        {
            this.Validate();

            // Currently, the Entity Framework doesn’t mark the entities  
            // that are removed from a navigation property (in our example the Products) 
            // as deleted in the context.  
            // The following code uses LINQ to Objects against the Local collection  
            // to find all products and marks any that do not have 
            // a Category reference as deleted.  
            // The ToList call is required because otherwise  
            // the collection will be modified  
            // by the Remove call while it is being enumerated.  
            // In most other situations you can do LINQ to Objects directly  
            // against the Local property without using ToList first. 
            foreach (var product in _context.Companies.Local.ToList())
            {
                if (product.CompanyName == null)
                {
                    _context.Companies.Remove(product);
                }
            }
            Company company = new Company
            {
                CompanyName = this.companyNameTextBox.Text,
                AccountTitle = this.accountTitleTextBox.Text,
                Address = this.addressTextBox.Text,
                Bank = this.bankTextBox.Text,
                CurrentBalance = int.Parse(this.currentBalanceTextBox.Text),
                OpeningBalance = int.Parse(this.openingBalanceTextBox.Text),
            };
            _context.Companies.Add(company);
            // Save the changes to the database. 
            this._context.SaveChanges();

            // Refresh the controls to show the values          
            // that were generated by the database. 
            this.DialogResult = DialogResult.OK;
            this.Close();
        } 

    }
}
